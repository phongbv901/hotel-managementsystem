#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HMS")]
	public partial class HotelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComposition(Composition instance);
    partial void UpdateComposition(Composition instance);
    partial void DeleteComposition(Composition instance);
    partial void InsertCost(Cost instance);
    partial void UpdateCost(Cost instance);
    partial void DeleteCost(Cost instance);
    partial void InsertCostCategory(CostCategory instance);
    partial void UpdateCostCategory(CostCategory instance);
    partial void DeleteCostCategory(CostCategory instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertHotelInfo(HotelInfo instance);
    partial void UpdateHotelInfo(HotelInfo instance);
    partial void DeleteHotelInfo(HotelInfo instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertInventoryHistory(InventoryHistory instance);
    partial void UpdateInventoryHistory(InventoryHistory instance);
    partial void DeleteInventoryHistory(InventoryHistory instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPriceAddition(PriceAddition instance);
    partial void UpdatePriceAddition(PriceAddition instance);
    partial void DeletePriceAddition(PriceAddition instance);
    partial void InsertPriceGroup(PriceGroup instance);
    partial void UpdatePriceGroup(PriceGroup instance);
    partial void DeletePriceGroup(PriceGroup instance);
    partial void InsertPriceNight(PriceNight instance);
    partial void UpdatePriceNight(PriceNight instance);
    partial void DeletePriceNight(PriceNight instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductCategory(ProductCategory instance);
    partial void UpdateProductCategory(ProductCategory instance);
    partial void DeleteProductCategory(ProductCategory instance);
    partial void InsertProductInventory(ProductInventory instance);
    partial void UpdateProductInventory(ProductInventory instance);
    partial void DeleteProductInventory(ProductInventory instance);
    partial void InsertProductItem(ProductItem instance);
    partial void UpdateProductItem(ProductItem instance);
    partial void DeleteProductItem(ProductItem instance);
    partial void InsertRent(Rent instance);
    partial void UpdateRent(Rent instance);
    partial void DeleteRent(Rent instance);
    partial void InsertRentFeeChange(RentFeeChange instance);
    partial void UpdateRentFeeChange(RentFeeChange instance);
    partial void DeleteRentFeeChange(RentFeeChange instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertRoomFloor(RoomFloor instance);
    partial void UpdateRoomFloor(RoomFloor instance);
    partial void DeleteRoomFloor(RoomFloor instance);
    #endregion
		
		public HotelDataContext() : 
				base(global::HotelDAL.Properties.Settings.Default.HMSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HotelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Composition> Compositions
		{
			get
			{
				return this.GetTable<Composition>();
			}
		}
		
		public System.Data.Linq.Table<Cost> Costs
		{
			get
			{
				return this.GetTable<Cost>();
			}
		}
		
		public System.Data.Linq.Table<CostCategory> CostCategories
		{
			get
			{
				return this.GetTable<CostCategory>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<HotelInfo> HotelInfos
		{
			get
			{
				return this.GetTable<HotelInfo>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryHistory> InventoryHistories
		{
			get
			{
				return this.GetTable<InventoryHistory>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PriceAddition> PriceAdditions
		{
			get
			{
				return this.GetTable<PriceAddition>();
			}
		}
		
		public System.Data.Linq.Table<PriceGroup> PriceGroups
		{
			get
			{
				return this.GetTable<PriceGroup>();
			}
		}
		
		public System.Data.Linq.Table<PriceNight> PriceNights
		{
			get
			{
				return this.GetTable<PriceNight>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategory> ProductCategories
		{
			get
			{
				return this.GetTable<ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductInventory> ProductInventories
		{
			get
			{
				return this.GetTable<ProductInventory>();
			}
		}
		
		public System.Data.Linq.Table<ProductItem> ProductItems
		{
			get
			{
				return this.GetTable<ProductItem>();
			}
		}
		
		public System.Data.Linq.Table<Rent> Rents
		{
			get
			{
				return this.GetTable<Rent>();
			}
		}
		
		public System.Data.Linq.Table<RentFeeChange> RentFeeChanges
		{
			get
			{
				return this.GetTable<RentFeeChange>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<RoomFloor> RoomFloors
		{
			get
			{
				return this.GetTable<RoomFloor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Composition")]
	public partial class Composition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _dasd;
		
		private decimal _CompositionID;
		
		private int _ProducID;
		
		private int _ItemID;
		
		private int _Quantity;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<ProductItem> _ProductItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndasdChanging(System.Guid value);
    partial void OndasdChanged();
    partial void OnCompositionIDChanging(decimal value);
    partial void OnCompositionIDChanged();
    partial void OnProducIDChanging(int value);
    partial void OnProducIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public Composition()
		{
			this._Product = default(EntityRef<Product>);
			this._ProductItem = default(EntityRef<ProductItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dasd", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid dasd
		{
			get
			{
				return this._dasd;
			}
			set
			{
				if ((this._dasd != value))
				{
					this.OndasdChanging(value);
					this.SendPropertyChanging();
					this._dasd = value;
					this.SendPropertyChanged("dasd");
					this.OndasdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompositionID", DbType="Money NOT NULL")]
		public decimal CompositionID
		{
			get
			{
				return this._CompositionID;
			}
			set
			{
				if ((this._CompositionID != value))
				{
					this.OnCompositionIDChanging(value);
					this.SendPropertyChanging();
					this._CompositionID = value;
					this.SendPropertyChanged("CompositionID");
					this.OnCompositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProducID", DbType="Int NOT NULL")]
		public int ProducID
		{
			get
			{
				return this._ProducID;
			}
			set
			{
				if ((this._ProducID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProducIDChanging(value);
					this.SendPropertyChanging();
					this._ProducID = value;
					this.SendPropertyChanged("ProducID");
					this.OnProducIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._ProductItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Composition", Storage="_Product", ThisKey="ProducID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Compositions.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Compositions.Add(this);
						this._ProducID = value.ProductID;
					}
					else
					{
						this._ProducID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductItem_Composition", Storage="_ProductItem", ThisKey="ItemID", OtherKey="ItemID", IsForeignKey=true)]
		public ProductItem ProductItem
		{
			get
			{
				return this._ProductItem.Entity;
			}
			set
			{
				ProductItem previousValue = this._ProductItem.Entity;
				if (((previousValue != value) 
							|| (this._ProductItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductItem.Entity = null;
						previousValue.Compositions.Remove(this);
					}
					this._ProductItem.Entity = value;
					if ((value != null))
					{
						value.Compositions.Add(this);
						this._ItemID = value.ItemID;
					}
					else
					{
						this._ItemID = default(int);
					}
					this.SendPropertyChanged("ProductItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cost")]
	public partial class Cost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostID;
		
		private int _CatID;
		
		private string _CostDescription;
		
		private System.DateTime _CostDate;
		
		private int _Amount;
		
		private int _CostStatus;
		
		private string _PaidPerson;
		
		private string _LoggedPerson;
		
		private string _ApprovedPerson;
		
		private EntityRef<CostCategory> _CostCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostIDChanging(int value);
    partial void OnCostIDChanged();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnCostDescriptionChanging(string value);
    partial void OnCostDescriptionChanged();
    partial void OnCostDateChanging(System.DateTime value);
    partial void OnCostDateChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnCostStatusChanging(int value);
    partial void OnCostStatusChanged();
    partial void OnPaidPersonChanging(string value);
    partial void OnPaidPersonChanged();
    partial void OnLoggedPersonChanging(string value);
    partial void OnLoggedPersonChanged();
    partial void OnApprovedPersonChanging(string value);
    partial void OnApprovedPersonChanged();
    #endregion
		
		public Cost()
		{
			this._CostCategory = default(EntityRef<CostCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CostID
		{
			get
			{
				return this._CostID;
			}
			set
			{
				if ((this._CostID != value))
				{
					this.OnCostIDChanging(value);
					this.SendPropertyChanging();
					this._CostID = value;
					this.SendPropertyChanged("CostID");
					this.OnCostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", DbType="Int NOT NULL")]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					if (this._CostCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostDescription", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CostDescription
		{
			get
			{
				return this._CostDescription;
			}
			set
			{
				if ((this._CostDescription != value))
				{
					this.OnCostDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CostDescription = value;
					this.SendPropertyChanged("CostDescription");
					this.OnCostDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostDate", DbType="DateTime NOT NULL")]
		public System.DateTime CostDate
		{
			get
			{
				return this._CostDate;
			}
			set
			{
				if ((this._CostDate != value))
				{
					this.OnCostDateChanging(value);
					this.SendPropertyChanging();
					this._CostDate = value;
					this.SendPropertyChanged("CostDate");
					this.OnCostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostStatus", DbType="Int NOT NULL")]
		public int CostStatus
		{
			get
			{
				return this._CostStatus;
			}
			set
			{
				if ((this._CostStatus != value))
				{
					this.OnCostStatusChanging(value);
					this.SendPropertyChanging();
					this._CostStatus = value;
					this.SendPropertyChanged("CostStatus");
					this.OnCostStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidPerson", DbType="NVarChar(50)")]
		public string PaidPerson
		{
			get
			{
				return this._PaidPerson;
			}
			set
			{
				if ((this._PaidPerson != value))
				{
					this.OnPaidPersonChanging(value);
					this.SendPropertyChanging();
					this._PaidPerson = value;
					this.SendPropertyChanged("PaidPerson");
					this.OnPaidPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggedPerson", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LoggedPerson
		{
			get
			{
				return this._LoggedPerson;
			}
			set
			{
				if ((this._LoggedPerson != value))
				{
					this.OnLoggedPersonChanging(value);
					this.SendPropertyChanging();
					this._LoggedPerson = value;
					this.SendPropertyChanged("LoggedPerson");
					this.OnLoggedPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedPerson", DbType="NVarChar(50)")]
		public string ApprovedPerson
		{
			get
			{
				return this._ApprovedPerson;
			}
			set
			{
				if ((this._ApprovedPerson != value))
				{
					this.OnApprovedPersonChanging(value);
					this.SendPropertyChanging();
					this._ApprovedPerson = value;
					this.SendPropertyChanged("ApprovedPerson");
					this.OnApprovedPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCategory_Cost", Storage="_CostCategory", ThisKey="CatID", OtherKey="CatID", IsForeignKey=true)]
		public CostCategory CostCategory
		{
			get
			{
				return this._CostCategory.Entity;
			}
			set
			{
				CostCategory previousValue = this._CostCategory.Entity;
				if (((previousValue != value) 
							|| (this._CostCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCategory.Entity = null;
						previousValue.Costs.Remove(this);
					}
					this._CostCategory.Entity = value;
					if ((value != null))
					{
						value.Costs.Add(this);
						this._CatID = value.CatID;
					}
					else
					{
						this._CatID = default(int);
					}
					this.SendPropertyChanged("CostCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostCategory")]
	public partial class CostCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatID;
		
		private string _CatName;
		
		private EntitySet<Cost> _Costs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnCatNameChanging(string value);
    partial void OnCatNameChanged();
    #endregion
		
		public CostCategory()
		{
			this._Costs = new EntitySet<Cost>(new Action<Cost>(this.attach_Costs), new Action<Cost>(this.detach_Costs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CatName
		{
			get
			{
				return this._CatName;
			}
			set
			{
				if ((this._CatName != value))
				{
					this.OnCatNameChanging(value);
					this.SendPropertyChanging();
					this._CatName = value;
					this.SendPropertyChanged("CatName");
					this.OnCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCategory_Cost", Storage="_Costs", ThisKey="CatID", OtherKey="CatID")]
		public EntitySet<Cost> Costs
		{
			get
			{
				return this._Costs;
			}
			set
			{
				this._Costs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Costs(Cost entity)
		{
			this.SendPropertyChanging();
			entity.CostCategory = this;
		}
		
		private void detach_Costs(Cost entity)
		{
			this.SendPropertyChanging();
			entity.CostCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _PersonID;
		
		private string _CustomerName;
		
		private int _RentID;
		
		private string _Address;
		
		private EntityRef<Rent> _Rent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnPersonIDChanging(string value);
    partial void OnPersonIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnRentIDChanging(int value);
    partial void OnRentIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Customer()
		{
			this._Rent = default(EntityRef<Rent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentID", DbType="Int NOT NULL")]
		public int RentID
		{
			get
			{
				return this._RentID;
			}
			set
			{
				if ((this._RentID != value))
				{
					if (this._Rent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentIDChanging(value);
					this.SendPropertyChanging();
					this._RentID = value;
					this.SendPropertyChanged("RentID");
					this.OnRentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_Customer", Storage="_Rent", ThisKey="RentID", OtherKey="RentID", IsForeignKey=true)]
		public Rent Rent
		{
			get
			{
				return this._Rent.Entity;
			}
			set
			{
				Rent previousValue = this._Rent.Entity;
				if (((previousValue != value) 
							|| (this._Rent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rent.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Rent.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._RentID = value.RentID;
					}
					else
					{
						this._RentID = default(int);
					}
					this.SendPropertyChanged("Rent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelInfo")]
	public partial class HotelInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HotelID;
		
		private string _HotelName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Website;
		
		private string _City;
		
		private string _Descriptions;
		
		private System.DateTime _StartDayTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnHotelNameChanging(string value);
    partial void OnHotelNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnDescriptionsChanging(string value);
    partial void OnDescriptionsChanged();
    partial void OnStartDayTimeChanging(System.DateTime value);
    partial void OnStartDayTimeChanged();
    #endregion
		
		public HotelInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string HotelName
		{
			get
			{
				return this._HotelName;
			}
			set
			{
				if ((this._HotelName != value))
				{
					this.OnHotelNameChanging(value);
					this.SendPropertyChanging();
					this._HotelName = value;
					this.SendPropertyChanged("HotelName");
					this.OnHotelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descriptions", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Descriptions
		{
			get
			{
				return this._Descriptions;
			}
			set
			{
				if ((this._Descriptions != value))
				{
					this.OnDescriptionsChanging(value);
					this.SendPropertyChanging();
					this._Descriptions = value;
					this.SendPropertyChanged("Descriptions");
					this.OnDescriptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDayTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartDayTime
		{
			get
			{
				return this._StartDayTime;
			}
			set
			{
				if ((this._StartDayTime != value))
				{
					this.OnStartDayTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDayTime = value;
					this.SendPropertyChanged("StartDayTime");
					this.OnStartDayTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private int _Quantity;
		
		private int _HistoryID;
		
		private EntityRef<InventoryHistory> _InventoryHistory;
		
		private EntityRef<ProductItem> _ProductItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnHistoryIDChanging(int value);
    partial void OnHistoryIDChanged();
    #endregion
		
		public Inventory()
		{
			this._InventoryHistory = default(EntityRef<InventoryHistory>);
			this._ProductItem = default(EntityRef<ProductItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._ProductItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HistoryID
		{
			get
			{
				return this._HistoryID;
			}
			set
			{
				if ((this._HistoryID != value))
				{
					if (this._InventoryHistory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._HistoryID = value;
					this.SendPropertyChanged("HistoryID");
					this.OnHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryHistory_Inventory", Storage="_InventoryHistory", ThisKey="HistoryID", OtherKey="HistoryID", IsForeignKey=true)]
		public InventoryHistory InventoryHistory
		{
			get
			{
				return this._InventoryHistory.Entity;
			}
			set
			{
				InventoryHistory previousValue = this._InventoryHistory.Entity;
				if (((previousValue != value) 
							|| (this._InventoryHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryHistory.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._InventoryHistory.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._HistoryID = value.HistoryID;
					}
					else
					{
						this._HistoryID = default(int);
					}
					this.SendPropertyChanged("InventoryHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductItem_Inventory", Storage="_ProductItem", ThisKey="ItemID", OtherKey="ItemID", IsForeignKey=true)]
		public ProductItem ProductItem
		{
			get
			{
				return this._ProductItem.Entity;
			}
			set
			{
				ProductItem previousValue = this._ProductItem.Entity;
				if (((previousValue != value) 
							|| (this._ProductItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductItem.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._ProductItem.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._ItemID = value.ItemID;
					}
					else
					{
						this._ItemID = default(int);
					}
					this.SendPropertyChanged("ProductItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryHistory")]
	public partial class InventoryHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoryID;
		
		private System.DateTime _CheckingDate;
		
		private EntitySet<Inventory> _Inventories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoryIDChanging(int value);
    partial void OnHistoryIDChanged();
    partial void OnCheckingDateChanging(System.DateTime value);
    partial void OnCheckingDateChanged();
    #endregion
		
		public InventoryHistory()
		{
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HistoryID
		{
			get
			{
				return this._HistoryID;
			}
			set
			{
				if ((this._HistoryID != value))
				{
					this.OnHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._HistoryID = value;
					this.SendPropertyChanged("HistoryID");
					this.OnHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckingDate", DbType="DateTime NOT NULL")]
		public System.DateTime CheckingDate
		{
			get
			{
				return this._CheckingDate;
			}
			set
			{
				if ((this._CheckingDate != value))
				{
					this.OnCheckingDateChanging(value);
					this.SendPropertyChanging();
					this._CheckingDate = value;
					this.SendPropertyChanged("CheckingDate");
					this.OnCheckingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InventoryHistory_Inventory", Storage="_Inventories", ThisKey="HistoryID", OtherKey="HistoryID")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryHistory = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.InventoryHistory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _RentID;
		
		private int _ProductID;
		
		private int _TotalPrice;
		
		private int _Quantity;
		
		private System.DateTime _OrderDate;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Rent> _Rent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnRentIDChanging(int value);
    partial void OnRentIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnTotalPriceChanging(int value);
    partial void OnTotalPriceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Product = default(EntityRef<Product>);
			this._Rent = default(EntityRef<Rent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentID", DbType="Int NOT NULL")]
		public int RentID
		{
			get
			{
				return this._RentID;
			}
			set
			{
				if ((this._RentID != value))
				{
					if (this._Rent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentIDChanging(value);
					this.SendPropertyChanging();
					this._RentID = value;
					this.SendPropertyChanged("RentID");
					this.OnRentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int NOT NULL")]
		public int TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_OrderDetail", Storage="_Rent", ThisKey="RentID", OtherKey="RentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Rent Rent
		{
			get
			{
				return this._Rent.Entity;
			}
			set
			{
				Rent previousValue = this._Rent.Entity;
				if (((previousValue != value) 
							|| (this._Rent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rent.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Rent.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._RentID = value.RentID;
					}
					else
					{
						this._RentID = default(int);
					}
					this.SendPropertyChanged("Rent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private int _RentID;
		
		private string _Username;
		
		private int _Amount;
		
		private string _Notes;
		
		private System.Nullable<System.DateTime> _PayTime;
		
		private EntityRef<Rent> _Rent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnRentIDChanging(int value);
    partial void OnRentIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnPayTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPayTimeChanged();
    #endregion
		
		public Payment()
		{
			this._Rent = default(EntityRef<Rent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentID", DbType="Int NOT NULL")]
		public int RentID
		{
			get
			{
				return this._RentID;
			}
			set
			{
				if ((this._RentID != value))
				{
					if (this._Rent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentIDChanging(value);
					this.SendPropertyChanging();
					this._RentID = value;
					this.SendPropertyChanged("RentID");
					this.OnRentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(250)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PayTime
		{
			get
			{
				return this._PayTime;
			}
			set
			{
				if ((this._PayTime != value))
				{
					this.OnPayTimeChanging(value);
					this.SendPropertyChanging();
					this._PayTime = value;
					this.SendPropertyChanged("PayTime");
					this.OnPayTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_Payment", Storage="_Rent", ThisKey="RentID", OtherKey="RentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Rent Rent
		{
			get
			{
				return this._Rent.Entity;
			}
			set
			{
				Rent previousValue = this._Rent.Entity;
				if (((previousValue != value) 
							|| (this._Rent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rent.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Rent.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._RentID = value.RentID;
					}
					else
					{
						this._RentID = default(int);
					}
					this.SendPropertyChanged("Rent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceAddition")]
	public partial class PriceAddition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdditionPriceID;
		
		private string _EarlyHourRange;
		
		private string _EarlyPriceRange;
		
		private string _LateHourRange;
		
		private string _LatePriceRange;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdditionPriceIDChanging(int value);
    partial void OnAdditionPriceIDChanged();
    partial void OnEarlyHourRangeChanging(string value);
    partial void OnEarlyHourRangeChanged();
    partial void OnEarlyPriceRangeChanging(string value);
    partial void OnEarlyPriceRangeChanged();
    partial void OnLateHourRangeChanging(string value);
    partial void OnLateHourRangeChanged();
    partial void OnLatePriceRangeChanging(string value);
    partial void OnLatePriceRangeChanged();
    #endregion
		
		public PriceAddition()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionPriceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdditionPriceID
		{
			get
			{
				return this._AdditionPriceID;
			}
			set
			{
				if ((this._AdditionPriceID != value))
				{
					this.OnAdditionPriceIDChanging(value);
					this.SendPropertyChanging();
					this._AdditionPriceID = value;
					this.SendPropertyChanged("AdditionPriceID");
					this.OnAdditionPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarlyHourRange", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EarlyHourRange
		{
			get
			{
				return this._EarlyHourRange;
			}
			set
			{
				if ((this._EarlyHourRange != value))
				{
					this.OnEarlyHourRangeChanging(value);
					this.SendPropertyChanging();
					this._EarlyHourRange = value;
					this.SendPropertyChanged("EarlyHourRange");
					this.OnEarlyHourRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarlyPriceRange", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EarlyPriceRange
		{
			get
			{
				return this._EarlyPriceRange;
			}
			set
			{
				if ((this._EarlyPriceRange != value))
				{
					this.OnEarlyPriceRangeChanging(value);
					this.SendPropertyChanging();
					this._EarlyPriceRange = value;
					this.SendPropertyChanged("EarlyPriceRange");
					this.OnEarlyPriceRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LateHourRange", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LateHourRange
		{
			get
			{
				return this._LateHourRange;
			}
			set
			{
				if ((this._LateHourRange != value))
				{
					this.OnLateHourRangeChanging(value);
					this.SendPropertyChanging();
					this._LateHourRange = value;
					this.SendPropertyChanged("LateHourRange");
					this.OnLateHourRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatePriceRange", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LatePriceRange
		{
			get
			{
				return this._LatePriceRange;
			}
			set
			{
				if ((this._LatePriceRange != value))
				{
					this.OnLatePriceRangeChanging(value);
					this.SendPropertyChanging();
					this._LatePriceRange = value;
					this.SendPropertyChanged("LatePriceRange");
					this.OnLatePriceRangeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceGroup")]
	public partial class PriceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriceGroupID;
		
		private string _PriceGroupName;
		
		private System.DateTime _StartDayTime;
		
		private System.DateTime _EndNightTime;
		
		private int _DayPrice;
		
		private int _RoundMinute;
		
		private int _FirstHourPrice;
		
		private int _SecondHourPrice;
		
		private int _ThirdHourPrice;
		
		private int _NextHourPrice;
		
		private int _NightAdditionPriceID;
		
		private int _DayAdditionPriceID;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceGroupIDChanging(int value);
    partial void OnPriceGroupIDChanged();
    partial void OnPriceGroupNameChanging(string value);
    partial void OnPriceGroupNameChanged();
    partial void OnStartDayTimeChanging(System.DateTime value);
    partial void OnStartDayTimeChanged();
    partial void OnEndNightTimeChanging(System.DateTime value);
    partial void OnEndNightTimeChanged();
    partial void OnDayPriceChanging(int value);
    partial void OnDayPriceChanged();
    partial void OnRoundMinuteChanging(int value);
    partial void OnRoundMinuteChanged();
    partial void OnFirstHourPriceChanging(int value);
    partial void OnFirstHourPriceChanged();
    partial void OnSecondHourPriceChanging(int value);
    partial void OnSecondHourPriceChanged();
    partial void OnThirdHourPriceChanging(int value);
    partial void OnThirdHourPriceChanged();
    partial void OnNextHourPriceChanging(int value);
    partial void OnNextHourPriceChanged();
    partial void OnNightAdditionPriceIDChanging(int value);
    partial void OnNightAdditionPriceIDChanged();
    partial void OnDayAdditionPriceIDChanging(int value);
    partial void OnDayAdditionPriceIDChanged();
    #endregion
		
		public PriceGroup()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PriceGroupID
		{
			get
			{
				return this._PriceGroupID;
			}
			set
			{
				if ((this._PriceGroupID != value))
				{
					this.OnPriceGroupIDChanging(value);
					this.SendPropertyChanging();
					this._PriceGroupID = value;
					this.SendPropertyChanged("PriceGroupID");
					this.OnPriceGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceGroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PriceGroupName
		{
			get
			{
				return this._PriceGroupName;
			}
			set
			{
				if ((this._PriceGroupName != value))
				{
					this.OnPriceGroupNameChanging(value);
					this.SendPropertyChanging();
					this._PriceGroupName = value;
					this.SendPropertyChanged("PriceGroupName");
					this.OnPriceGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDayTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartDayTime
		{
			get
			{
				return this._StartDayTime;
			}
			set
			{
				if ((this._StartDayTime != value))
				{
					this.OnStartDayTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDayTime = value;
					this.SendPropertyChanged("StartDayTime");
					this.OnStartDayTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndNightTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndNightTime
		{
			get
			{
				return this._EndNightTime;
			}
			set
			{
				if ((this._EndNightTime != value))
				{
					this.OnEndNightTimeChanging(value);
					this.SendPropertyChanging();
					this._EndNightTime = value;
					this.SendPropertyChanged("EndNightTime");
					this.OnEndNightTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayPrice", DbType="Int NOT NULL")]
		public int DayPrice
		{
			get
			{
				return this._DayPrice;
			}
			set
			{
				if ((this._DayPrice != value))
				{
					this.OnDayPriceChanging(value);
					this.SendPropertyChanging();
					this._DayPrice = value;
					this.SendPropertyChanged("DayPrice");
					this.OnDayPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundMinute", DbType="Int NOT NULL")]
		public int RoundMinute
		{
			get
			{
				return this._RoundMinute;
			}
			set
			{
				if ((this._RoundMinute != value))
				{
					this.OnRoundMinuteChanging(value);
					this.SendPropertyChanging();
					this._RoundMinute = value;
					this.SendPropertyChanged("RoundMinute");
					this.OnRoundMinuteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstHourPrice", DbType="Int NOT NULL")]
		public int FirstHourPrice
		{
			get
			{
				return this._FirstHourPrice;
			}
			set
			{
				if ((this._FirstHourPrice != value))
				{
					this.OnFirstHourPriceChanging(value);
					this.SendPropertyChanging();
					this._FirstHourPrice = value;
					this.SendPropertyChanged("FirstHourPrice");
					this.OnFirstHourPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondHourPrice", DbType="Int NOT NULL")]
		public int SecondHourPrice
		{
			get
			{
				return this._SecondHourPrice;
			}
			set
			{
				if ((this._SecondHourPrice != value))
				{
					this.OnSecondHourPriceChanging(value);
					this.SendPropertyChanging();
					this._SecondHourPrice = value;
					this.SendPropertyChanged("SecondHourPrice");
					this.OnSecondHourPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdHourPrice", DbType="Int NOT NULL")]
		public int ThirdHourPrice
		{
			get
			{
				return this._ThirdHourPrice;
			}
			set
			{
				if ((this._ThirdHourPrice != value))
				{
					this.OnThirdHourPriceChanging(value);
					this.SendPropertyChanging();
					this._ThirdHourPrice = value;
					this.SendPropertyChanged("ThirdHourPrice");
					this.OnThirdHourPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextHourPrice", DbType="Int NOT NULL")]
		public int NextHourPrice
		{
			get
			{
				return this._NextHourPrice;
			}
			set
			{
				if ((this._NextHourPrice != value))
				{
					this.OnNextHourPriceChanging(value);
					this.SendPropertyChanging();
					this._NextHourPrice = value;
					this.SendPropertyChanged("NextHourPrice");
					this.OnNextHourPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NightAdditionPriceID", DbType="Int NOT NULL")]
		public int NightAdditionPriceID
		{
			get
			{
				return this._NightAdditionPriceID;
			}
			set
			{
				if ((this._NightAdditionPriceID != value))
				{
					this.OnNightAdditionPriceIDChanging(value);
					this.SendPropertyChanging();
					this._NightAdditionPriceID = value;
					this.SendPropertyChanged("NightAdditionPriceID");
					this.OnNightAdditionPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayAdditionPriceID", DbType="Int NOT NULL")]
		public int DayAdditionPriceID
		{
			get
			{
				return this._DayAdditionPriceID;
			}
			set
			{
				if ((this._DayAdditionPriceID != value))
				{
					this.OnDayAdditionPriceIDChanging(value);
					this.SendPropertyChanging();
					this._DayAdditionPriceID = value;
					this.SendPropertyChanged("DayAdditionPriceID");
					this.OnDayAdditionPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceGroup_Room", Storage="_Rooms", ThisKey="PriceGroupID", OtherKey="PriceGroupID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.PriceGroup = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.PriceGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriceNight")]
	public partial class PriceNight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomPriceID;
		
		private int _PriceGroupID;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private int _Price;
		
		private System.DateTime _MaxDuration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomPriceIDChanging(int value);
    partial void OnRoomPriceIDChanged();
    partial void OnPriceGroupIDChanging(int value);
    partial void OnPriceGroupIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnMaxDurationChanging(System.DateTime value);
    partial void OnMaxDurationChanged();
    #endregion
		
		public PriceNight()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomPriceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomPriceID
		{
			get
			{
				return this._RoomPriceID;
			}
			set
			{
				if ((this._RoomPriceID != value))
				{
					this.OnRoomPriceIDChanging(value);
					this.SendPropertyChanging();
					this._RoomPriceID = value;
					this.SendPropertyChanged("RoomPriceID");
					this.OnRoomPriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceGroupID", DbType="Int NOT NULL")]
		public int PriceGroupID
		{
			get
			{
				return this._PriceGroupID;
			}
			set
			{
				if ((this._PriceGroupID != value))
				{
					this.OnPriceGroupIDChanging(value);
					this.SendPropertyChanging();
					this._PriceGroupID = value;
					this.SendPropertyChanged("PriceGroupID");
					this.OnPriceGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxDuration", DbType="DateTime NOT NULL")]
		public System.DateTime MaxDuration
		{
			get
			{
				return this._MaxDuration;
			}
			set
			{
				if ((this._MaxDuration != value))
				{
					this.OnMaxDurationChanging(value);
					this.SendPropertyChanging();
					this._MaxDuration = value;
					this.SendPropertyChanged("MaxDuration");
					this.OnMaxDurationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductName;
		
		private int _Price;
		
		private string _PicURL;
		
		private int _CatID;
		
		private EntitySet<Composition> _Compositions;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<ProductCategory> _ProductCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnPicURLChanging(string value);
    partial void OnPicURLChanged();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    #endregion
		
		public Product()
		{
			this._Compositions = new EntitySet<Composition>(new Action<Composition>(this.attach_Compositions), new Action<Composition>(this.detach_Compositions));
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._ProductCategory = default(EntityRef<ProductCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(50)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicURL", DbType="NVarChar(50)")]
		public string PicURL
		{
			get
			{
				return this._PicURL;
			}
			set
			{
				if ((this._PicURL != value))
				{
					this.OnPicURLChanging(value);
					this.SendPropertyChanging();
					this._PicURL = value;
					this.SendPropertyChanged("PicURL");
					this.OnPicURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", DbType="Int NOT NULL")]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					if (this._ProductCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Composition", Storage="_Compositions", ThisKey="ProductID", OtherKey="ProducID")]
		public EntitySet<Composition> Compositions
		{
			get
			{
				return this._Compositions;
			}
			set
			{
				this._Compositions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_OrderDetails", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="CatID", OtherKey="CateID", IsForeignKey=true)]
		public ProductCategory ProductCategory
		{
			get
			{
				return this._ProductCategory.Entity;
			}
			set
			{
				ProductCategory previousValue = this._ProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductCategory.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductCategory.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CatID = value.CateID;
					}
					else
					{
						this._CatID = default(int);
					}
					this.SendPropertyChanged("ProductCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Compositions(Composition entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Compositions(Composition entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategory")]
	public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CateID;
		
		private string _CateName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCateIDChanging(int value);
    partial void OnCateIDChanged();
    partial void OnCateNameChanging(string value);
    partial void OnCateNameChanged();
    #endregion
		
		public ProductCategory()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CateID
		{
			get
			{
				return this._CateID;
			}
			set
			{
				if ((this._CateID != value))
				{
					this.OnCateIDChanging(value);
					this.SendPropertyChanging();
					this._CateID = value;
					this.SendPropertyChanged("CateID");
					this.OnCateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CateName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CateName
		{
			get
			{
				return this._CateName;
			}
			set
			{
				if ((this._CateName != value))
				{
					this.OnCateNameChanging(value);
					this.SendPropertyChanging();
					this._CateName = value;
					this.SendPropertyChanged("CateName");
					this.OnCateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_Product", Storage="_Products", ThisKey="CateID", OtherKey="CatID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductInventory")]
	public partial class ProductInventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductInventoryID;
		
		private System.Nullable<int> _ItemID;
		
		private int _Quantity;
		
		private string _Notes;
		
		private System.DateTime _ChangeDate;
		
		private bool _IsImport;
		
		private bool _IsApproved;
		
		private EntityRef<ProductItem> _ProductItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductInventoryIDChanging(int value);
    partial void OnProductInventoryIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnChangeDateChanging(System.DateTime value);
    partial void OnChangeDateChanged();
    partial void OnIsImportChanging(bool value);
    partial void OnIsImportChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    #endregion
		
		public ProductInventory()
		{
			this._ProductItem = default(EntityRef<ProductItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductInventoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductInventoryID
		{
			get
			{
				return this._ProductInventoryID;
			}
			set
			{
				if ((this._ProductInventoryID != value))
				{
					this.OnProductInventoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductInventoryID = value;
					this.SendPropertyChanged("ProductInventoryID");
					this.OnProductInventoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._ProductItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(200)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImport", DbType="Bit NOT NULL")]
		public bool IsImport
		{
			get
			{
				return this._IsImport;
			}
			set
			{
				if ((this._IsImport != value))
				{
					this.OnIsImportChanging(value);
					this.SendPropertyChanging();
					this._IsImport = value;
					this.SendPropertyChanged("IsImport");
					this.OnIsImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductItem_ProductInventory", Storage="_ProductItem", ThisKey="ItemID", OtherKey="ItemID", IsForeignKey=true)]
		public ProductItem ProductItem
		{
			get
			{
				return this._ProductItem.Entity;
			}
			set
			{
				ProductItem previousValue = this._ProductItem.Entity;
				if (((previousValue != value) 
							|| (this._ProductItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductItem.Entity = null;
						previousValue.ProductInventories.Remove(this);
					}
					this._ProductItem.Entity = value;
					if ((value != null))
					{
						value.ProductInventories.Add(this);
						this._ItemID = value.ItemID;
					}
					else
					{
						this._ItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductItem")]
	public partial class ProductItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private string _ItemName;
		
		private string _Unit;
		
		private EntitySet<Composition> _Compositions;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<ProductInventory> _ProductInventories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public ProductItem()
		{
			this._Compositions = new EntitySet<Composition>(new Action<Composition>(this.attach_Compositions), new Action<Composition>(this.detach_Compositions));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._ProductInventories = new EntitySet<ProductInventory>(new Action<ProductInventory>(this.attach_ProductInventories), new Action<ProductInventory>(this.detach_ProductInventories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductItem_Composition", Storage="_Compositions", ThisKey="ItemID", OtherKey="ItemID")]
		public EntitySet<Composition> Compositions
		{
			get
			{
				return this._Compositions;
			}
			set
			{
				this._Compositions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductItem_Inventory", Storage="_Inventories", ThisKey="ItemID", OtherKey="ItemID")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductItem_ProductInventory", Storage="_ProductInventories", ThisKey="ItemID", OtherKey="ItemID")]
		public EntitySet<ProductInventory> ProductInventories
		{
			get
			{
				return this._ProductInventories;
			}
			set
			{
				this._ProductInventories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Compositions(Composition entity)
		{
			this.SendPropertyChanging();
			entity.ProductItem = this;
		}
		
		private void detach_Compositions(Composition entity)
		{
			this.SendPropertyChanging();
			entity.ProductItem = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.ProductItem = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.ProductItem = null;
		}
		
		private void attach_ProductInventories(ProductInventory entity)
		{
			this.SendPropertyChanging();
			entity.ProductItem = this;
		}
		
		private void detach_ProductInventories(ProductInventory entity)
		{
			this.SendPropertyChanging();
			entity.ProductItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rent")]
	public partial class Rent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentID;
		
		private int _RoomID;
		
		private System.DateTime _CheckInDate;
		
		private System.Nullable<System.DateTime> _CheckOutDate;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private int _RentFee;
		
		private int _OrderFee;
		
		private int _TotalPayment;
		
		private int _DiscountFee;
		
		private int _AdditionFee;
		
		private int _RentStatus;
		
		private int _RentType;
		
		private string _Notes;
		
		private string _FeeDescription;
		
		private string _CheckInPerson;
		
		private string _CheckOutPerson;
		
		private string _ApprovePerson;
		
		private string _InvoiceID;
		
		private string _BikeID;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<RentFeeChange> _RentFeeChanges;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentIDChanging(int value);
    partial void OnRentIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnCheckInDateChanging(System.DateTime value);
    partial void OnCheckInDateChanged();
    partial void OnCheckOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckOutDateChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    partial void OnRentFeeChanging(int value);
    partial void OnRentFeeChanged();
    partial void OnOrderFeeChanging(int value);
    partial void OnOrderFeeChanged();
    partial void OnTotalPaymentChanging(int value);
    partial void OnTotalPaymentChanged();
    partial void OnDiscountFeeChanging(int value);
    partial void OnDiscountFeeChanged();
    partial void OnAdditionFeeChanging(int value);
    partial void OnAdditionFeeChanged();
    partial void OnRentStatusChanging(int value);
    partial void OnRentStatusChanged();
    partial void OnRentTypeChanging(int value);
    partial void OnRentTypeChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnFeeDescriptionChanging(string value);
    partial void OnFeeDescriptionChanged();
    partial void OnCheckInPersonChanging(string value);
    partial void OnCheckInPersonChanged();
    partial void OnCheckOutPersonChanging(string value);
    partial void OnCheckOutPersonChanged();
    partial void OnApprovePersonChanging(string value);
    partial void OnApprovePersonChanged();
    partial void OnInvoiceIDChanging(string value);
    partial void OnInvoiceIDChanged();
    partial void OnBikeIDChanging(string value);
    partial void OnBikeIDChanged();
    #endregion
		
		public Rent()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._RentFeeChanges = new EntitySet<RentFeeChange>(new Action<RentFeeChange>(this.attach_RentFeeChanges), new Action<RentFeeChange>(this.detach_RentFeeChanges));
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentID
		{
			get
			{
				return this._RentID;
			}
			set
			{
				if ((this._RentID != value))
				{
					this.OnRentIDChanging(value);
					this.SendPropertyChanging();
					this._RentID = value;
					this.SendPropertyChanged("RentID");
					this.OnRentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInDate", DbType="DateTime NOT NULL")]
		public System.DateTime CheckInDate
		{
			get
			{
				return this._CheckInDate;
			}
			set
			{
				if ((this._CheckInDate != value))
				{
					this.OnCheckInDateChanging(value);
					this.SendPropertyChanging();
					this._CheckInDate = value;
					this.SendPropertyChanged("CheckInDate");
					this.OnCheckInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckOutDate
		{
			get
			{
				return this._CheckOutDate;
			}
			set
			{
				if ((this._CheckOutDate != value))
				{
					this.OnCheckOutDateChanging(value);
					this.SendPropertyChanging();
					this._CheckOutDate = value;
					this.SendPropertyChanged("CheckOutDate");
					this.OnCheckOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentFee", DbType="Int NOT NULL")]
		public int RentFee
		{
			get
			{
				return this._RentFee;
			}
			set
			{
				if ((this._RentFee != value))
				{
					this.OnRentFeeChanging(value);
					this.SendPropertyChanging();
					this._RentFee = value;
					this.SendPropertyChanged("RentFee");
					this.OnRentFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderFee", DbType="Int NOT NULL")]
		public int OrderFee
		{
			get
			{
				return this._OrderFee;
			}
			set
			{
				if ((this._OrderFee != value))
				{
					this.OnOrderFeeChanging(value);
					this.SendPropertyChanging();
					this._OrderFee = value;
					this.SendPropertyChanged("OrderFee");
					this.OnOrderFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPayment", DbType="Int NOT NULL")]
		public int TotalPayment
		{
			get
			{
				return this._TotalPayment;
			}
			set
			{
				if ((this._TotalPayment != value))
				{
					this.OnTotalPaymentChanging(value);
					this.SendPropertyChanging();
					this._TotalPayment = value;
					this.SendPropertyChanged("TotalPayment");
					this.OnTotalPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountFee", DbType="Int NOT NULL")]
		public int DiscountFee
		{
			get
			{
				return this._DiscountFee;
			}
			set
			{
				if ((this._DiscountFee != value))
				{
					this.OnDiscountFeeChanging(value);
					this.SendPropertyChanging();
					this._DiscountFee = value;
					this.SendPropertyChanged("DiscountFee");
					this.OnDiscountFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionFee", DbType="Int NOT NULL")]
		public int AdditionFee
		{
			get
			{
				return this._AdditionFee;
			}
			set
			{
				if ((this._AdditionFee != value))
				{
					this.OnAdditionFeeChanging(value);
					this.SendPropertyChanging();
					this._AdditionFee = value;
					this.SendPropertyChanged("AdditionFee");
					this.OnAdditionFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentStatus", DbType="Int NOT NULL")]
		public int RentStatus
		{
			get
			{
				return this._RentStatus;
			}
			set
			{
				if ((this._RentStatus != value))
				{
					this.OnRentStatusChanging(value);
					this.SendPropertyChanging();
					this._RentStatus = value;
					this.SendPropertyChanged("RentStatus");
					this.OnRentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentType", DbType="Int NOT NULL")]
		public int RentType
		{
			get
			{
				return this._RentType;
			}
			set
			{
				if ((this._RentType != value))
				{
					this.OnRentTypeChanging(value);
					this.SendPropertyChanging();
					this._RentType = value;
					this.SendPropertyChanged("RentType");
					this.OnRentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(250)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeDescription", DbType="NVarChar(250)")]
		public string FeeDescription
		{
			get
			{
				return this._FeeDescription;
			}
			set
			{
				if ((this._FeeDescription != value))
				{
					this.OnFeeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FeeDescription = value;
					this.SendPropertyChanged("FeeDescription");
					this.OnFeeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInPerson", DbType="NVarChar(50)")]
		public string CheckInPerson
		{
			get
			{
				return this._CheckInPerson;
			}
			set
			{
				if ((this._CheckInPerson != value))
				{
					this.OnCheckInPersonChanging(value);
					this.SendPropertyChanging();
					this._CheckInPerson = value;
					this.SendPropertyChanged("CheckInPerson");
					this.OnCheckInPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckOutPerson", DbType="NVarChar(50)")]
		public string CheckOutPerson
		{
			get
			{
				return this._CheckOutPerson;
			}
			set
			{
				if ((this._CheckOutPerson != value))
				{
					this.OnCheckOutPersonChanging(value);
					this.SendPropertyChanging();
					this._CheckOutPerson = value;
					this.SendPropertyChanged("CheckOutPerson");
					this.OnCheckOutPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovePerson", DbType="NVarChar(50)")]
		public string ApprovePerson
		{
			get
			{
				return this._ApprovePerson;
			}
			set
			{
				if ((this._ApprovePerson != value))
				{
					this.OnApprovePersonChanging(value);
					this.SendPropertyChanging();
					this._ApprovePerson = value;
					this.SendPropertyChanged("ApprovePerson");
					this.OnApprovePersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="NVarChar(50)")]
		public string InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BikeID", DbType="NVarChar(50)")]
		public string BikeID
		{
			get
			{
				return this._BikeID;
			}
			set
			{
				if ((this._BikeID != value))
				{
					this.OnBikeIDChanging(value);
					this.SendPropertyChanging();
					this._BikeID = value;
					this.SendPropertyChanged("BikeID");
					this.OnBikeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_Customer", Storage="_Customers", ThisKey="RentID", OtherKey="RentID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_OrderDetail", Storage="_OrderDetails", ThisKey="RentID", OtherKey="RentID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_Payment", Storage="_Payments", ThisKey="RentID", OtherKey="RentID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_RentFeeChange", Storage="_RentFeeChanges", ThisKey="RentID", OtherKey="RentID")]
		public EntitySet<RentFeeChange> RentFeeChanges
		{
			get
			{
				return this._RentFeeChanges;
			}
			set
			{
				this._RentFeeChanges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Rent", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Rents.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Rents.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Rent = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Rent = null;
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Rent = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Rent = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Rent = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Rent = null;
		}
		
		private void attach_RentFeeChanges(RentFeeChange entity)
		{
			this.SendPropertyChanging();
			entity.Rent = this;
		}
		
		private void detach_RentFeeChanges(RentFeeChange entity)
		{
			this.SendPropertyChanging();
			entity.Rent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RentFeeChange")]
	public partial class RentFeeChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentFeeChangeID;
		
		private int _RentID;
		
		private string _Username;
		
		private int _Amount;
		
		private string _Notes;
		
		private System.DateTime _AddTime;
		
		private bool _IsAddition;
		
		private EntityRef<Rent> _Rent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentFeeChangeIDChanging(int value);
    partial void OnRentFeeChangeIDChanged();
    partial void OnRentIDChanging(int value);
    partial void OnRentIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnIsAdditionChanging(bool value);
    partial void OnIsAdditionChanged();
    #endregion
		
		public RentFeeChange()
		{
			this._Rent = default(EntityRef<Rent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentFeeChangeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentFeeChangeID
		{
			get
			{
				return this._RentFeeChangeID;
			}
			set
			{
				if ((this._RentFeeChangeID != value))
				{
					this.OnRentFeeChangeIDChanging(value);
					this.SendPropertyChanging();
					this._RentFeeChangeID = value;
					this.SendPropertyChanged("RentFeeChangeID");
					this.OnRentFeeChangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentID", DbType="Int NOT NULL")]
		public int RentID
		{
			get
			{
				return this._RentID;
			}
			set
			{
				if ((this._RentID != value))
				{
					if (this._Rent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentIDChanging(value);
					this.SendPropertyChanging();
					this._RentID = value;
					this.SendPropertyChanged("RentID");
					this.OnRentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddTime", DbType="DateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAddition", DbType="Bit NOT NULL")]
		public bool IsAddition
		{
			get
			{
				return this._IsAddition;
			}
			set
			{
				if ((this._IsAddition != value))
				{
					this.OnIsAdditionChanging(value);
					this.SendPropertyChanging();
					this._IsAddition = value;
					this.SendPropertyChanged("IsAddition");
					this.OnIsAdditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rent_RentFeeChange", Storage="_Rent", ThisKey="RentID", OtherKey="RentID", IsForeignKey=true)]
		public Rent Rent
		{
			get
			{
				return this._Rent.Entity;
			}
			set
			{
				Rent previousValue = this._Rent.Entity;
				if (((previousValue != value) 
							|| (this._Rent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rent.Entity = null;
						previousValue.RentFeeChanges.Remove(this);
					}
					this._Rent.Entity = value;
					if ((value != null))
					{
						value.RentFeeChanges.Add(this);
						this._RentID = value.RentID;
					}
					else
					{
						this._RentID = default(int);
					}
					this.SendPropertyChanged("Rent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private string _RoomName;
		
		private int _NumOfBed;
		
		private int _NumOfPerson;
		
		private string _Funiture;
		
		private string _RoomDescription;
		
		private int _RoomStatus;
		
		private int _FloorID;
		
		private int _PriceGroupID;
		
		private EntitySet<Rent> _Rents;
		
		private EntityRef<PriceGroup> _PriceGroup;
		
		private EntityRef<RoomFloor> _RoomFloor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnNumOfBedChanging(int value);
    partial void OnNumOfBedChanged();
    partial void OnNumOfPersonChanging(int value);
    partial void OnNumOfPersonChanged();
    partial void OnFunitureChanging(string value);
    partial void OnFunitureChanged();
    partial void OnRoomDescriptionChanging(string value);
    partial void OnRoomDescriptionChanged();
    partial void OnRoomStatusChanging(int value);
    partial void OnRoomStatusChanged();
    partial void OnFloorIDChanging(int value);
    partial void OnFloorIDChanged();
    partial void OnPriceGroupIDChanging(int value);
    partial void OnPriceGroupIDChanged();
    #endregion
		
		public Room()
		{
			this._Rents = new EntitySet<Rent>(new Action<Rent>(this.attach_Rents), new Action<Rent>(this.detach_Rents));
			this._PriceGroup = default(EntityRef<PriceGroup>);
			this._RoomFloor = default(EntityRef<RoomFloor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomName", DbType="NVarChar(50)")]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfBed", DbType="Int NOT NULL")]
		public int NumOfBed
		{
			get
			{
				return this._NumOfBed;
			}
			set
			{
				if ((this._NumOfBed != value))
				{
					this.OnNumOfBedChanging(value);
					this.SendPropertyChanging();
					this._NumOfBed = value;
					this.SendPropertyChanged("NumOfBed");
					this.OnNumOfBedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfPerson", DbType="Int NOT NULL")]
		public int NumOfPerson
		{
			get
			{
				return this._NumOfPerson;
			}
			set
			{
				if ((this._NumOfPerson != value))
				{
					this.OnNumOfPersonChanging(value);
					this.SendPropertyChanging();
					this._NumOfPerson = value;
					this.SendPropertyChanged("NumOfPerson");
					this.OnNumOfPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Funiture", DbType="NVarChar(250)")]
		public string Funiture
		{
			get
			{
				return this._Funiture;
			}
			set
			{
				if ((this._Funiture != value))
				{
					this.OnFunitureChanging(value);
					this.SendPropertyChanging();
					this._Funiture = value;
					this.SendPropertyChanged("Funiture");
					this.OnFunitureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomDescription", DbType="NVarChar(250)")]
		public string RoomDescription
		{
			get
			{
				return this._RoomDescription;
			}
			set
			{
				if ((this._RoomDescription != value))
				{
					this.OnRoomDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoomDescription = value;
					this.SendPropertyChanged("RoomDescription");
					this.OnRoomDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomStatus", DbType="Int NOT NULL")]
		public int RoomStatus
		{
			get
			{
				return this._RoomStatus;
			}
			set
			{
				if ((this._RoomStatus != value))
				{
					this.OnRoomStatusChanging(value);
					this.SendPropertyChanging();
					this._RoomStatus = value;
					this.SendPropertyChanged("RoomStatus");
					this.OnRoomStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloorID", DbType="Int NOT NULL")]
		public int FloorID
		{
			get
			{
				return this._FloorID;
			}
			set
			{
				if ((this._FloorID != value))
				{
					if (this._RoomFloor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFloorIDChanging(value);
					this.SendPropertyChanging();
					this._FloorID = value;
					this.SendPropertyChanged("FloorID");
					this.OnFloorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceGroupID", DbType="Int NOT NULL")]
		public int PriceGroupID
		{
			get
			{
				return this._PriceGroupID;
			}
			set
			{
				if ((this._PriceGroupID != value))
				{
					if (this._PriceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceGroupIDChanging(value);
					this.SendPropertyChanging();
					this._PriceGroupID = value;
					this.SendPropertyChanged("PriceGroupID");
					this.OnPriceGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Rent", Storage="_Rents", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Rent> Rents
		{
			get
			{
				return this._Rents;
			}
			set
			{
				this._Rents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriceGroup_Room", Storage="_PriceGroup", ThisKey="PriceGroupID", OtherKey="PriceGroupID", IsForeignKey=true)]
		public PriceGroup PriceGroup
		{
			get
			{
				return this._PriceGroup.Entity;
			}
			set
			{
				PriceGroup previousValue = this._PriceGroup.Entity;
				if (((previousValue != value) 
							|| (this._PriceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriceGroup.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._PriceGroup.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._PriceGroupID = value.PriceGroupID;
					}
					else
					{
						this._PriceGroupID = default(int);
					}
					this.SendPropertyChanged("PriceGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomFloor_Room", Storage="_RoomFloor", ThisKey="FloorID", OtherKey="FloorID", IsForeignKey=true)]
		public RoomFloor RoomFloor
		{
			get
			{
				return this._RoomFloor.Entity;
			}
			set
			{
				RoomFloor previousValue = this._RoomFloor.Entity;
				if (((previousValue != value) 
							|| (this._RoomFloor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomFloor.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._RoomFloor.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._FloorID = value.FloorID;
					}
					else
					{
						this._FloorID = default(int);
					}
					this.SendPropertyChanged("RoomFloor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rents(Rent entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Rents(Rent entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomFloor")]
	public partial class RoomFloor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FloorID;
		
		private string _FloorName;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFloorIDChanging(int value);
    partial void OnFloorIDChanged();
    partial void OnFloorNameChanging(string value);
    partial void OnFloorNameChanged();
    #endregion
		
		public RoomFloor()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FloorID
		{
			get
			{
				return this._FloorID;
			}
			set
			{
				if ((this._FloorID != value))
				{
					this.OnFloorIDChanging(value);
					this.SendPropertyChanging();
					this._FloorID = value;
					this.SendPropertyChanged("FloorID");
					this.OnFloorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FloorName
		{
			get
			{
				return this._FloorName;
			}
			set
			{
				if ((this._FloorName != value))
				{
					this.OnFloorNameChanging(value);
					this.SendPropertyChanging();
					this._FloorName = value;
					this.SendPropertyChanged("FloorName");
					this.OnFloorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomFloor_Room", Storage="_Rooms", ThisKey="FloorID", OtherKey="FloorID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomFloor = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomFloor = null;
		}
	}
}
#pragma warning restore 1591
